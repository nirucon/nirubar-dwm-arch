#!/bin/sh

# Status bar for arch linux with dwm using xsetroot by Nicklas Rudolfsson
# https://github.com/nirucon

# Dependencies:
#   sudo pacman -S xorg-xsetroot alsa-utils xorg-xbacklight cmus curl playerctl ttf-font-awesome jq

# Function to check if Font Awesome is installed
check_font_awesome() {
    fc-list | grep -q -i "Font Awesome"
}

# Set identifier based on font availability
IDENTIFIER=$(check_font_awesome && echo "fontawesome" || echo "text")

# Define separator characters
SPRL=" [ "
SPRR=" ] "

# Check if the device is a laptop
IS_LAPTOP=$(ls /sys/class/power_supply | grep -q 'BAT' && echo true || echo false)

# Function to color the output based on thresholds
colorize_output() {
    local value=$1
    local threshold=$2
    local color=$3

    if [ "$value" -ge "$threshold" ]; then
        echo "^c$color^$value%^d^"
    else
        echo "$value%"
    fi
}

# Define functions for each module

module_alsa() {
    STATUS=$(amixer sget Master | awk -F '[][]' 'END{ print $4 }')
    VOL=$(amixer get Master | awk -F '[][]' 'END{ print $2 }' | sed 's/%//')
    case $STATUS in
        off) ICON="";;
        *) case $VOL in
               [0-9]|[1-3][0-9]) ICON=" $VOL%";;
               [4-6][0-9]) ICON=" $VOL%";;
               *) ICON=" $VOL%";;
           esac;;
    esac
    echo "$ICON"
}

module_backlight() {
    printf "bl: %.0f%%" "$(xbacklight)"
}

module_battery() {
    for battery in /sys/class/power_supply/BAT*; do
        [ -d "$battery" ] || continue
        CHARGE=$(cat "$battery/capacity")
        STATUS=$(cat "$battery/status")

        # Add a warning symbol if the charge is below 10%
        if [ "$CHARGE" -le 10 ]; then
            CHARGE_DISPLAY="$CHARGE% *"
        else
            CHARGE_DISPLAY="$CHARGE%"
        fi

        ICON=$(case $CHARGE in
                   [8-9][0-9]|100) echo "";;
                   [6-7][0-9]) echo "";;
                   [4-5][0-9]) echo "";;
                   [2-3][0-9]) echo "";;
                   *) echo "";;
               esac)
        [ "$STATUS" = "Charging" ] && ICON="$ICON "
        printf "%s %s " "$ICON" "$CHARGE_DISPLAY"
    done
}

module_cmus() {
    CMUSDATA=$(cmus-remote -Q 2>/dev/null)
    if [ -z "$CMUSDATA" ]; then
        echo ""
        return
    fi
    STATUS=$(echo "$CMUSDATA" | grep -w 'status' | awk '{print $2}')
    ICON=$(case $STATUS in
               playing) echo "";;
               *) echo "";;
           esac)
    ARTIST=$(echo "$CMUSDATA" | grep -w 'tag artist' | sed 's/tag artist //')
    TRACK=$(echo "$CMUSDATA" | grep -w 'tag title' | sed 's/tag title //')
    printf "%s %s - %s" "$ICON" "$ARTIST" "$TRACK"
}

module_date() {
    date "+%Y-%m-%d %H:%M |"
}

module_loadavg() {
    LOAD_AVG=$(cut -d " " -f 1-3 /proc/loadavg)
    printf " %s" "$LOAD_AVG"
}

module_networkmanager() {
    CONNAME=$(nmcli -t -f active,ssid dev wifi | grep '^yes' | cut -d: -f2)
    [ -z "$CONNAME" ] && CONNAME=$(nmcli -t -f active,device,type,connection dev status | grep '^yes:wired' | cut -d: -f4)
    PUBLIC_IP=$(curl -s https://ipinfo.io/ip)
    printf " %s %s" "$CONNAME" "$PUBLIC_IP"
}

module_networkmanager_onlywifi() {
    CONNAME=$(nmcli -t -f active,ssid dev wifi | grep '^yes' | cut -d: -f2)

    if [ -n "$CONNAME" ]; then
        printf " %s" "$CONNAME"
    else
        echo "No Wi-Fi"
    fi
}

module_pulse() {
    if ! command -v pamixer >/dev/null 2>&1; then
        echo "pamixer not found"
        return
    fi
    VOL=$(pamixer --get-volume)
    MUTE=$(pamixer --get-mute)
    ICON=$(case $MUTE in
               true) echo "";;
               *) case $VOL in
                      [0-9]|[1-3][0-9]) echo " $VOL%";;
                      [4-6][0-9]) echo " $VOL%";;
                      *) echo " $VOL%";;
                  esac;;
           esac)
    echo "$ICON"
}

module_resources() {
    # Define the update interval (in seconds)
    UPDATE_INTERVAL=5  # Update every 5 seconds

    # Define the timestamp and cache file locations
    TIMESTAMP_FILE="/tmp/resources_timestamp"
    CACHE_FILE="/tmp/resources_cache"

    # Get the current time
    CURRENT_TIME=$(date +%s)

    # Get the last update time
    LAST_UPDATE_TIME=$(cat "$TIMESTAMP_FILE" 2>/dev/null || echo 0)

    # Check if the interval has passed
    if [ $(($CURRENT_TIME - $LAST_UPDATE_TIME)) -ge $UPDATE_INTERVAL ]; then
        # CPU information
        CORES=$(nproc)
        CPU_USAGE=$(grep 'cpu ' /proc/stat | awk '{usage=($2+$4)*100/($2+$4+$5)} END {print usage}')
        CPU_USAGE_INT=$(printf "%.0f" "$CPU_USAGE")
        CPU_USAGE_DISPLAY=$(colorize_output "$CPU_USAGE_INT" 90 "#FF0000")

        # Memory information
        free_output=$(free -h | awk '/^Mem:/ {print $3 "/" $2}')
        mem_usage=$(free | grep Mem | awk '{print $3/$2 * 100.0}')
        mem_usage_int=$(printf "%.0f" "$mem_usage")
        mem_display=$(colorize_output "$mem_usage_int" 90 "#FF0000")

        # Disk information
        disk_output=$(df -h /home | awk 'END{print $3 "/" $2}')
        disk_usage=$(df /home | awk 'END{print $5}' | sed 's/%//')
        disk_display=$(colorize_output "$disk_usage" 90 "#FF0000")

        # Determine whether to use icons or text
        if [ "$IDENTIFIER" = "fontawesome" ]; then
            CPU_ICON=" "  # CPU icon
            MEM_ICON=""  # Memory icon
            DISK_ICON=" "  # Disk icon

            # Format output with icons only and values
            printf "%s%s (%s) %s%s %s%s" "$CPU_ICON" "$CPU_USAGE_DISPLAY" "($CORES)" "$MEM_ICON" "$free_output" "$DISK_ICON" "$disk_output" > "$CACHE_FILE"
        else
            # Format output with text labels
            printf "cpu: %s (%s) | mem: %s | disk: %s" "$CPU_USAGE_DISPLAY" "$CORES" "$free_output" "$disk_output" > "$CACHE_FILE"
        fi

        # Update the timestamp
        echo "$CURRENT_TIME" > "$TIMESTAMP_FILE"
    fi

    # Output the cached data
    cat "$CACHE_FILE" | tr -d '\n'  # Ensure no trailing newlines
}

module_spotify() {
    ARTIST=$(playerctl metadata artist 2>/dev/null)
    TRACK=$(playerctl metadata title 2>/dev/null)
    STATUS=$(playerctl status 2>/dev/null)
    if [ -z "$ARTIST" ] || [ -z "$TRACK" ]; then
        echo ""
        return
    fi
    ICON=$(case $STATUS in
               Playing) echo "";;
               *) echo "";;
           esac)
    printf "%s %s - %s" "$ICON" "$ARTIST" "$TRACK"
}

module_updates() {
    UPDATE_INTERVAL=7200  # 2 hours
    UPDATE_TIMESTAMP_FILE="/tmp/updates_timestamp"
    CURRENT_TIME=$(date +%s)
    LAST_UPDATE_TIME=$(cat "$UPDATE_TIMESTAMP_FILE" 2>/dev/null || echo 0)

    # Define icons
    if [ "$IDENTIFIER" = "fontawesome" ]; then
        PAC_ICON=""  # Download icon for pacman
        AUR_ICON=""  # Arch Linux icon for AUR
    else
        PAC_ICON="pac"
        AUR_ICON="aur"
    fi

    if [ $(($CURRENT_TIME - $LAST_UPDATE_TIME)) -ge $UPDATE_INTERVAL ]; then
        PAC=$(checkupdates 2>/dev/null | wc -l)
        AUR=$(yay -Qua 2>/dev/null | wc -l)
        UPDATE_LABEL="$PAC_ICON: $PAC $AUR_ICON: $AUR"
        echo "$CURRENT_TIME" > "$UPDATE_TIMESTAMP_FILE"
        echo "$UPDATE_LABEL" > "${UPDATE_TIMESTAMP_FILE}.output"
    else
        UPDATE_LABEL=$(cat "${UPDATE_TIMESTAMP_FILE}.output")
    fi
    printf "%s" "$UPDATE_LABEL"
}

module_weather() {
    # Default to Celsius, comment out the following line to use Fahrenheit instead
    UNIT="metric"
    # UNIT="imperial" # Uncomment this line to use Fahrenheit

    API_KEY="your_openweathermap_api_key"
    CITY_ID="your_city_id"
    WEATHER_URL="http://api.openweathermap.org/data/2.5/weather?id=${CITY_ID}&units=${UNIT}&appid=${API_KEY}"

    WEATHER_DATA=$(curl -s "$WEATHER_URL")
    TEMP=$(echo "$WEATHER_DATA" | jq ".main.temp" | xargs printf "%.0f")
    ICON_CODE=$(echo "$WEATHER_DATA" | jq -r ".weather[0].icon")

    ICON=$(case $ICON_CODE in
               01d) echo "";; # clear sky day
               01n) echo "";; # clear sky night
               02d) echo "";; # few clouds day
               02n) echo "";; # few clouds night
               03*) echo "";; # scattered clouds
               04*) echo "";; # broken clouds
               09*) echo "🌧";; # shower rain
               10d) echo "";; # rain day
               10n) echo "";; # rain night
               11*) echo "⛈";; # thunderstorm
               13*) echo "🌨";; # snow
                50*) echo "🌫";; # mist
               *) echo "";; # default
           esac)

    printf "%s %s°C" "$ICON" "$TEMP"
    # To display temperature in Fahrenheit, use the following line instead:
    # printf "%s %s°F" "$ICON" "$TEMP"
}

# Main loop
while true; do
    STATUS_OUTPUT=""
    STATUS_OUTPUT+="| $(module_alsa)"
    #STATUS_OUTPUT+=" | $(module_backlight)" # Uncomment to enable backlight module
    $IS_LAPTOP && STATUS_OUTPUT+=" | $(module_battery)"
    ps -C cmus > /dev/null && STATUS_OUTPUT+=" | $(module_cmus)"
    ps -C spotify > /dev/null && STATUS_OUTPUT+=" | $(module_spotify)"
    STATUS_OUTPUT+=" | $(module_resources)"
    STATUS_OUTPUT+=" | $(module_updates)"
    #STATUS_OUTPUT+=" | $(module_loadavg)" # Uncomment to enable load average module
    #STATUS_OUTPUT+=" | $(module_networkmanager)" # Uncomment to enable network manager module
    #STATUS_OUTPUT+=" | $(module_networkmanager_onlywifi)" # Uncomment to enable network manager module
    #STATUS_OUTPUT+=" | $(module_weather)" # Uncomment to enable weather module
    STATUS_OUTPUT+=" | $(module_date)"

    xsetroot -name "$STATUS_OUTPUT"
    sleep 1
done
